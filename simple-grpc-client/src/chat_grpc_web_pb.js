/**
 * @fileoverview gRPC-Web generated client stub for chatPackage
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.12
// source: src/chat.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.chatPackage = require('./chat_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chatPackage.ChatServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chatPackage.ChatServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chatPackage.User,
 *   !proto.chatPackage.ResponseEvent>}
 */
const methodDescriptor_ChatService_joinRequest = new grpc.web.MethodDescriptor(
  '/chatPackage.ChatService/joinRequest',
  grpc.web.MethodType.UNARY,
  proto.chatPackage.User,
  proto.chatPackage.ResponseEvent,
  /**
   * @param {!proto.chatPackage.User} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chatPackage.ResponseEvent.deserializeBinary
);


/**
 * @param {!proto.chatPackage.User} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chatPackage.ResponseEvent)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chatPackage.ResponseEvent>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chatPackage.ChatServiceClient.prototype.joinRequest =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chatPackage.ChatService/joinRequest',
      request,
      metadata || {},
      methodDescriptor_ChatService_joinRequest,
      callback);
};


/**
 * @param {!proto.chatPackage.User} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chatPackage.ResponseEvent>}
 *     Promise that resolves to the response
 */
proto.chatPackage.ChatServicePromiseClient.prototype.joinRequest =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chatPackage.ChatService/joinRequest',
      request,
      metadata || {},
      methodDescriptor_ChatService_joinRequest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chatPackage.LikeMessage,
 *   !proto.chatPackage.ResponseEvent>}
 */
const methodDescriptor_ChatService_likeMessage = new grpc.web.MethodDescriptor(
  '/chatPackage.ChatService/likeMessage',
  grpc.web.MethodType.UNARY,
  proto.chatPackage.LikeMessage,
  proto.chatPackage.ResponseEvent,
  /**
   * @param {!proto.chatPackage.LikeMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chatPackage.ResponseEvent.deserializeBinary
);


/**
 * @param {!proto.chatPackage.LikeMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chatPackage.ResponseEvent)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chatPackage.ResponseEvent>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chatPackage.ChatServiceClient.prototype.likeMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chatPackage.ChatService/likeMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_likeMessage,
      callback);
};


/**
 * @param {!proto.chatPackage.LikeMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chatPackage.ResponseEvent>}
 *     Promise that resolves to the response
 */
proto.chatPackage.ChatServicePromiseClient.prototype.likeMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chatPackage.ChatService/likeMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_likeMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chatPackage.MessagePayload,
 *   !proto.chatPackage.ResponseEvent>}
 */
const methodDescriptor_ChatService_sendMsg = new grpc.web.MethodDescriptor(
  '/chatPackage.ChatService/sendMsg',
  grpc.web.MethodType.UNARY,
  proto.chatPackage.MessagePayload,
  proto.chatPackage.ResponseEvent,
  /**
   * @param {!proto.chatPackage.MessagePayload} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chatPackage.ResponseEvent.deserializeBinary
);


/**
 * @param {!proto.chatPackage.MessagePayload} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chatPackage.ResponseEvent)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chatPackage.ResponseEvent>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chatPackage.ChatServiceClient.prototype.sendMsg =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chatPackage.ChatService/sendMsg',
      request,
      metadata || {},
      methodDescriptor_ChatService_sendMsg,
      callback);
};


/**
 * @param {!proto.chatPackage.MessagePayload} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chatPackage.ResponseEvent>}
 *     Promise that resolves to the response
 */
proto.chatPackage.ChatServicePromiseClient.prototype.sendMsg =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chatPackage.ChatService/sendMsg',
      request,
      metadata || {},
      methodDescriptor_ChatService_sendMsg);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chatPackage.Empty,
 *   !proto.chatPackage.ChatEvent>}
 */
const methodDescriptor_ChatService_receiveEvent = new grpc.web.MethodDescriptor(
  '/chatPackage.ChatService/receiveEvent',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.chatPackage.Empty,
  proto.chatPackage.ChatEvent,
  /**
   * @param {!proto.chatPackage.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chatPackage.ChatEvent.deserializeBinary
);


/**
 * @param {!proto.chatPackage.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.chatPackage.ChatEvent>}
 *     The XHR Node Readable Stream
 */
proto.chatPackage.ChatServiceClient.prototype.receiveEvent =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/chatPackage.ChatService/receiveEvent',
      request,
      metadata || {},
      methodDescriptor_ChatService_receiveEvent);
};


/**
 * @param {!proto.chatPackage.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.chatPackage.ChatEvent>}
 *     The XHR Node Readable Stream
 */
proto.chatPackage.ChatServicePromiseClient.prototype.receiveEvent =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/chatPackage.ChatService/receiveEvent',
      request,
      metadata || {},
      methodDescriptor_ChatService_receiveEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chatPackage.Empty,
 *   !proto.chatPackage.UserList>}
 */
const methodDescriptor_ChatService_getAllUsers = new grpc.web.MethodDescriptor(
  '/chatPackage.ChatService/getAllUsers',
  grpc.web.MethodType.UNARY,
  proto.chatPackage.Empty,
  proto.chatPackage.UserList,
  /**
   * @param {!proto.chatPackage.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chatPackage.UserList.deserializeBinary
);


/**
 * @param {!proto.chatPackage.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chatPackage.UserList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chatPackage.UserList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chatPackage.ChatServiceClient.prototype.getAllUsers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chatPackage.ChatService/getAllUsers',
      request,
      metadata || {},
      methodDescriptor_ChatService_getAllUsers,
      callback);
};


/**
 * @param {!proto.chatPackage.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chatPackage.UserList>}
 *     Promise that resolves to the response
 */
proto.chatPackage.ChatServicePromiseClient.prototype.getAllUsers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chatPackage.ChatService/getAllUsers',
      request,
      metadata || {},
      methodDescriptor_ChatService_getAllUsers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chatPackage.User,
 *   !proto.chatPackage.MessageList>}
 */
const methodDescriptor_ChatService_getAllMessages = new grpc.web.MethodDescriptor(
  '/chatPackage.ChatService/getAllMessages',
  grpc.web.MethodType.UNARY,
  proto.chatPackage.User,
  proto.chatPackage.MessageList,
  /**
   * @param {!proto.chatPackage.User} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chatPackage.MessageList.deserializeBinary
);


/**
 * @param {!proto.chatPackage.User} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chatPackage.MessageList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chatPackage.MessageList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chatPackage.ChatServiceClient.prototype.getAllMessages =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chatPackage.ChatService/getAllMessages',
      request,
      metadata || {},
      methodDescriptor_ChatService_getAllMessages,
      callback);
};


/**
 * @param {!proto.chatPackage.User} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chatPackage.MessageList>}
 *     Promise that resolves to the response
 */
proto.chatPackage.ChatServicePromiseClient.prototype.getAllMessages =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chatPackage.ChatService/getAllMessages',
      request,
      metadata || {},
      methodDescriptor_ChatService_getAllMessages);
};


module.exports = proto.chatPackage;

